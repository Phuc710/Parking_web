import requests
import time
import json
import base64
import os
import qrcode
from PIL import Image
from io import BytesIO

# --- C·∫•u h√¨nh API v√† ƒë∆∞·ªùng d·∫´n ---
SITE_URL = 'https://xparking.x10.mx'
CHECKIN_API = f'{SITE_URL}/api/checkin.php'
CHECKOUT_API = f'{SITE_URL}/api/checkout.php'
CHECK_PAYMENT_API = f'{SITE_URL}/api/check_payment.php'

# --- H√†m m√¥ ph·ªèng ---
def get_user_input(prompt):
    """L·∫•y input t·ª´ ng∆∞·ªùi d√πng, cho ph√©p tho√°t b·∫±ng 'q'."""
    user_input = input(f"> {prompt}: ").strip()
    if user_input.lower() == 'q':
        return None
    return user_input

def show_qr_code(qr_data):
    """Hi·ªÉn th·ªã QR code b·∫±ng th∆∞ vi·ªán qrcode v√† PIL."""
    try:
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(qr_data)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        img.show()
    except Exception as e:
        print(f"Kh√¥ng th·ªÉ hi·ªÉn th·ªã QR code. Vui l√≤ng qu√©t URL sau: {qr_data}")
        print(f"L·ªói: {e}")

def main():
    """Ch∆∞∆°ng tr√¨nh ch√≠nh ƒë·ªÉ m√¥ ph·ªèng quy tr√¨nh."""
    print("--- M√¥ ph·ªèng h·ªá th·ªëng ƒë·ªó xe XParking ---")
    print("Nh·∫≠p 'q' b·∫•t c·ª© l√∫c n√†o ƒë·ªÉ tho√°t.")

    while True:
        print("\nCh·ªçn ch·ª©c nƒÉng:")
        print("1. Xe v√†o (Check-in)")
        print("2. Xe ra (Check-out)")
        print("3. Tho√°t")

        choice = get_user_input("L·ª±a ch·ªçn c·ªßa b·∫°n")
        if choice is None or choice == '3':
            break

        if choice == '1':
            print("\n--- Xe v√†o b√£i ---")
            license_plate = get_user_input("Nh·∫≠p bi·ªÉn s·ªë xe (VD: 51F-123.45)")
            if not license_plate:
                continue

            # Chu·∫©n b·ªã d·ªØ li·ªáu v√† g·ª≠i y√™u c·∫ßu
            payload = {'license_plate': license_plate, 'image_path': 'entry_image.jpg'}
            try:
                response = requests.post(CHECKIN_API, data=payload)
                result = response.json()
                print(f"\nK·∫øt qu·∫£: {json.dumps(result, indent=4, ensure_ascii=False)}")

                if result.get('success'):
                    print("\n‚úÖ Xe ƒë√£ v√†o b√£i th√†nh c√¥ng!")
                    print(f"Bi·ªÉn s·ªë: {result['license_plate']}")
                    print(f"Slot ƒë·ªó: {result['slot_id']}")
                    print(f"RFID ƒë∆∞·ª£c g√°n: {result['rfid']}")
                    
                    if result.get('has_booking'):
                        print("üìù Th√¥ng b√°o: Xe n√†y ƒë√£ c√≥ ƒë·∫∑t ch·ªó tr∆∞·ªõc, kh√¥ng c·∫ßn thanh to√°n ph√≠ ƒë·ªó.")
                    
                else:
                    print(f"‚ùå L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")

            except requests.exceptions.RequestException as e:
                print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")

        elif choice == '2':
            print("\n--- Xe ra b√£i ---")
            rfid_tag = get_user_input("Nh·∫≠p m√£ RFID (VD: CD290C73)")
            if not rfid_tag:
                continue
            
            # G·ª≠i y√™u c·∫ßu check-out
            payload = {'rfid': rfid_tag, 'image_path': 'exit_image.jpg'}
            try:
                response = requests.post(CHECKOUT_API, data=payload)
                result = response.json()
                print(f"\nK·∫øt qu·∫£: {json.dumps(result, indent=4, ensure_ascii=False)}")

                if result.get('success'):
                    if result.get('payment_required'):
                        print("üí≥ Y√™u c·∫ßu thanh to√°n:")
                        print(f"T·ªïng ph√≠: {result['fee']} VNƒê")
                        print(f"M√£ thanh to√°n: {result['payment_ref']}")
                        print(f"QR Code URL: {result['qr_code']}")
                        
                        # Hi·ªÉn th·ªã QR code
                        show_qr_code(result['qr_code'])

                        # V√≤ng l·∫∑p ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
                        payment_status = "pending"
                        while payment_status == "pending":
                            print("\nƒêang ch·ªù thanh to√°n...")
                            time.sleep(3)
                            
                            check_response = requests.get(f"{CHECK_PAYMENT_API}?ref={result['payment_ref']}")
                            check_result = check_response.json()
                            payment_status = check_result.get('status')
                            
                            if payment_status == "completed":
                                print("\n‚úÖ Thanh to√°n th√†nh c√¥ng! C·ªïng ƒë√£ m·ªü.")
                                break
                            elif payment_status == "failed" or payment_status == "expired":
                                print(f"‚ùå Thanh to√°n th·∫•t b·∫°i ho·∫∑c ƒë√£ h·∫øt h·∫°n: {payment_status}. Vui l√≤ng th·ª≠ l·∫°i.")
                                break
                    else:
                        print("‚úÖ Xe ra th√†nh c√¥ng! Kh√¥ng c√≥ ph√≠ ph√°t sinh.")
                        
                else:
                    print(f"‚ùå L·ªói: {result.get('error', 'Kh√¥ng x√°c ƒë·ªãnh')}")
                    
            except requests.exceptions.RequestException as e:
                print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
    
    print("\nK·∫øt th√∫c ch∆∞∆°ng tr√¨nh m√¥ ph·ªèng.")

if __name__ == "__main__":
    main()